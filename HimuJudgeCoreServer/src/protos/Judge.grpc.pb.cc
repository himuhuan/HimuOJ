// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Judge.proto

#include "Judge.pb.h"
#include "Judge.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace judge {

static const char* JudgeService_method_names[] = {
  "/judge.JudgeService/Judge",
  "/judge.JudgeService/ProcessJudgeTask",
};

std::unique_ptr< JudgeService::Stub> JudgeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< JudgeService::Stub> stub(new JudgeService::Stub(channel, options));
  return stub;
}

JudgeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Judge_(JudgeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProcessJudgeTask_(JudgeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status JudgeService::Stub::Judge(::grpc::ClientContext* context, const ::judge::JudgeTask& request, ::judge::JudgeResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::judge::JudgeTask, ::judge::JudgeResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Judge_, context, request, response);
}

void JudgeService::Stub::async::Judge(::grpc::ClientContext* context, const ::judge::JudgeTask* request, ::judge::JudgeResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::judge::JudgeTask, ::judge::JudgeResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Judge_, context, request, response, std::move(f));
}

void JudgeService::Stub::async::Judge(::grpc::ClientContext* context, const ::judge::JudgeTask* request, ::judge::JudgeResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Judge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::judge::JudgeResult>* JudgeService::Stub::PrepareAsyncJudgeRaw(::grpc::ClientContext* context, const ::judge::JudgeTask& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::judge::JudgeResult, ::judge::JudgeTask, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Judge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::judge::JudgeResult>* JudgeService::Stub::AsyncJudgeRaw(::grpc::ClientContext* context, const ::judge::JudgeTask& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJudgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::judge::JudgeTask, ::judge::JudgeResult>* JudgeService::Stub::ProcessJudgeTaskRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::judge::JudgeTask, ::judge::JudgeResult>::Create(channel_.get(), rpcmethod_ProcessJudgeTask_, context);
}

void JudgeService::Stub::async::ProcessJudgeTask(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::judge::JudgeTask,::judge::JudgeResult>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::judge::JudgeTask,::judge::JudgeResult>::Create(stub_->channel_.get(), stub_->rpcmethod_ProcessJudgeTask_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::judge::JudgeTask, ::judge::JudgeResult>* JudgeService::Stub::AsyncProcessJudgeTaskRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::judge::JudgeTask, ::judge::JudgeResult>::Create(channel_.get(), cq, rpcmethod_ProcessJudgeTask_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::judge::JudgeTask, ::judge::JudgeResult>* JudgeService::Stub::PrepareAsyncProcessJudgeTaskRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::judge::JudgeTask, ::judge::JudgeResult>::Create(channel_.get(), cq, rpcmethod_ProcessJudgeTask_, context, false, nullptr);
}

JudgeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JudgeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< JudgeService::Service, ::judge::JudgeTask, ::judge::JudgeResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](JudgeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::judge::JudgeTask* req,
             ::judge::JudgeResult* resp) {
               return service->Judge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JudgeService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< JudgeService::Service, ::judge::JudgeTask, ::judge::JudgeResult>(
          [](JudgeService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::judge::JudgeResult,
             ::judge::JudgeTask>* stream) {
               return service->ProcessJudgeTask(ctx, stream);
             }, this)));
}

JudgeService::Service::~Service() {
}

::grpc::Status JudgeService::Service::Judge(::grpc::ServerContext* context, const ::judge::JudgeTask* request, ::judge::JudgeResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status JudgeService::Service::ProcessJudgeTask(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::judge::JudgeResult, ::judge::JudgeTask>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace judge

