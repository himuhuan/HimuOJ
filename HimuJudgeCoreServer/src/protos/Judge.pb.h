// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Judge.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_Judge_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Judge_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Judge_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Judge_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Judge_2eproto;
namespace judge {
class JudgeCompilerInfo;
struct JudgeCompilerInfoDefaultTypeInternal;
extern JudgeCompilerInfoDefaultTypeInternal _JudgeCompilerInfo_default_instance_;
class JudgeDifference;
struct JudgeDifferenceDefaultTypeInternal;
extern JudgeDifferenceDefaultTypeInternal _JudgeDifference_default_instance_;
class JudgeResourceUsage;
struct JudgeResourceUsageDefaultTypeInternal;
extern JudgeResourceUsageDefaultTypeInternal _JudgeResourceUsage_default_instance_;
class JudgeResult;
struct JudgeResultDefaultTypeInternal;
extern JudgeResultDefaultTypeInternal _JudgeResult_default_instance_;
class JudgeTask;
struct JudgeTaskDefaultTypeInternal;
extern JudgeTaskDefaultTypeInternal _JudgeTask_default_instance_;
class JudgeTestPoint;
struct JudgeTestPointDefaultTypeInternal;
extern JudgeTestPointDefaultTypeInternal _JudgeTestPoint_default_instance_;
class JudgeTestPointResult;
struct JudgeTestPointResultDefaultTypeInternal;
extern JudgeTestPointResultDefaultTypeInternal _JudgeTestPointResult_default_instance_;
}  // namespace judge
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace judge {
enum JudgeStatus : int {
  PENDING = 0,
  RUNNING = 1,
  ACCEPTED = 2,
  WRONG_ANSWER = 3,
  COMPILE_ERROR = 4,
  TIME_LIMIT_EXCEEDED = 5,
  RUNTIME_ERROR = 6,
  MEMORY_LIMIT_EXCEEDED = 7,
  SKIPPED = 8,
  INTERNAL_ERROR = 99,
  JudgeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JudgeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JudgeStatus_IsValid(int value);
extern const uint32_t JudgeStatus_internal_data_[];
constexpr JudgeStatus JudgeStatus_MIN = static_cast<JudgeStatus>(0);
constexpr JudgeStatus JudgeStatus_MAX = static_cast<JudgeStatus>(99);
constexpr int JudgeStatus_ARRAYSIZE = 99 + 1;
const ::google::protobuf::EnumDescriptor*
JudgeStatus_descriptor();
template <typename T>
const std::string& JudgeStatus_Name(T value) {
  static_assert(std::is_same<T, JudgeStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JudgeStatus_Name().");
  return ::google::protobuf::internal::NameOfEnum(JudgeStatus_descriptor(), value);
}
inline bool JudgeStatus_Parse(absl::string_view name, JudgeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JudgeStatus>(
      JudgeStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class JudgeTestPoint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:judge.JudgeTestPoint) */ {
 public:
  inline JudgeTestPoint() : JudgeTestPoint(nullptr) {}
  ~JudgeTestPoint() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JudgeTestPoint(::google::protobuf::internal::ConstantInitialized);

  inline JudgeTestPoint(const JudgeTestPoint& from)
      : JudgeTestPoint(nullptr, from) {}
  JudgeTestPoint(JudgeTestPoint&& from) noexcept
    : JudgeTestPoint() {
    *this = ::std::move(from);
  }

  inline JudgeTestPoint& operator=(const JudgeTestPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline JudgeTestPoint& operator=(JudgeTestPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JudgeTestPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const JudgeTestPoint* internal_default_instance() {
    return reinterpret_cast<const JudgeTestPoint*>(
               &_JudgeTestPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JudgeTestPoint& a, JudgeTestPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(JudgeTestPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JudgeTestPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JudgeTestPoint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JudgeTestPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JudgeTestPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JudgeTestPoint& from) {
    JudgeTestPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(JudgeTestPoint* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "judge.JudgeTestPoint";
  }
  protected:
  explicit JudgeTestPoint(::google::protobuf::Arena* arena);
  JudgeTestPoint(::google::protobuf::Arena* arena, const JudgeTestPoint& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kExpectedFieldNumber = 2,
    kTestPointIdFieldNumber = 3,
  };
  // string input = 1;
  void clear_input() ;
  const std::string& input() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_input(Arg_&& arg, Args_... args);
  std::string* mutable_input();
  PROTOBUF_NODISCARD std::string* release_input();
  void set_allocated_input(std::string* value);

  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(
      const std::string& value);
  std::string* _internal_mutable_input();

  public:
  // string expected = 2;
  void clear_expected() ;
  const std::string& expected() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expected(Arg_&& arg, Args_... args);
  std::string* mutable_expected();
  PROTOBUF_NODISCARD std::string* release_expected();
  void set_allocated_expected(std::string* value);

  private:
  const std::string& _internal_expected() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expected(
      const std::string& value);
  std::string* _internal_mutable_expected();

  public:
  // int64 testPointId = 3;
  void clear_testpointid() ;
  ::int64_t testpointid() const;
  void set_testpointid(::int64_t value);

  private:
  ::int64_t _internal_testpointid() const;
  void _internal_set_testpointid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:judge.JudgeTestPoint)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr input_;
    ::google::protobuf::internal::ArenaStringPtr expected_;
    ::int64_t testpointid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Judge_2eproto;
};// -------------------------------------------------------------------

class JudgeResourceUsage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:judge.JudgeResourceUsage) */ {
 public:
  inline JudgeResourceUsage() : JudgeResourceUsage(nullptr) {}
  ~JudgeResourceUsage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JudgeResourceUsage(::google::protobuf::internal::ConstantInitialized);

  inline JudgeResourceUsage(const JudgeResourceUsage& from)
      : JudgeResourceUsage(nullptr, from) {}
  JudgeResourceUsage(JudgeResourceUsage&& from) noexcept
    : JudgeResourceUsage() {
    *this = ::std::move(from);
  }

  inline JudgeResourceUsage& operator=(const JudgeResourceUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline JudgeResourceUsage& operator=(JudgeResourceUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JudgeResourceUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const JudgeResourceUsage* internal_default_instance() {
    return reinterpret_cast<const JudgeResourceUsage*>(
               &_JudgeResourceUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JudgeResourceUsage& a, JudgeResourceUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(JudgeResourceUsage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JudgeResourceUsage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JudgeResourceUsage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JudgeResourceUsage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JudgeResourceUsage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JudgeResourceUsage& from) {
    JudgeResourceUsage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(JudgeResourceUsage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "judge.JudgeResourceUsage";
  }
  protected:
  explicit JudgeResourceUsage(::google::protobuf::Arena* arena);
  JudgeResourceUsage(::google::protobuf::Arena* arena, const JudgeResourceUsage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kMemoryFieldNumber = 2,
  };
  // int64 time = 1;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // int64 memory = 2;
  void clear_memory() ;
  ::int64_t memory() const;
  void set_memory(::int64_t value);

  private:
  ::int64_t _internal_memory() const;
  void _internal_set_memory(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:judge.JudgeResourceUsage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t time_;
    ::int64_t memory_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Judge_2eproto;
};// -------------------------------------------------------------------

class JudgeDifference final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:judge.JudgeDifference) */ {
 public:
  inline JudgeDifference() : JudgeDifference(nullptr) {}
  ~JudgeDifference() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JudgeDifference(::google::protobuf::internal::ConstantInitialized);

  inline JudgeDifference(const JudgeDifference& from)
      : JudgeDifference(nullptr, from) {}
  JudgeDifference(JudgeDifference&& from) noexcept
    : JudgeDifference() {
    *this = ::std::move(from);
  }

  inline JudgeDifference& operator=(const JudgeDifference& from) {
    CopyFrom(from);
    return *this;
  }
  inline JudgeDifference& operator=(JudgeDifference&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JudgeDifference& default_instance() {
    return *internal_default_instance();
  }
  static inline const JudgeDifference* internal_default_instance() {
    return reinterpret_cast<const JudgeDifference*>(
               &_JudgeDifference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JudgeDifference& a, JudgeDifference& b) {
    a.Swap(&b);
  }
  inline void Swap(JudgeDifference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JudgeDifference* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JudgeDifference* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JudgeDifference>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JudgeDifference& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JudgeDifference& from) {
    JudgeDifference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(JudgeDifference* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "judge.JudgeDifference";
  }
  protected:
  explicit JudgeDifference(::google::protobuf::Arena* arena);
  JudgeDifference(::google::protobuf::Arena* arena, const JudgeDifference& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActualFieldNumber = 2,
    kExpectedFieldNumber = 3,
    kPosFieldNumber = 1,
  };
  // string actual = 2;
  void clear_actual() ;
  const std::string& actual() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_actual(Arg_&& arg, Args_... args);
  std::string* mutable_actual();
  PROTOBUF_NODISCARD std::string* release_actual();
  void set_allocated_actual(std::string* value);

  private:
  const std::string& _internal_actual() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actual(
      const std::string& value);
  std::string* _internal_mutable_actual();

  public:
  // string expected = 3;
  void clear_expected() ;
  const std::string& expected() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expected(Arg_&& arg, Args_... args);
  std::string* mutable_expected();
  PROTOBUF_NODISCARD std::string* release_expected();
  void set_allocated_expected(std::string* value);

  private:
  const std::string& _internal_expected() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expected(
      const std::string& value);
  std::string* _internal_mutable_expected();

  public:
  // int64 pos = 1;
  void clear_pos() ;
  ::int64_t pos() const;
  void set_pos(::int64_t value);

  private:
  ::int64_t _internal_pos() const;
  void _internal_set_pos(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:judge.JudgeDifference)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr actual_;
    ::google::protobuf::internal::ArenaStringPtr expected_;
    ::int64_t pos_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Judge_2eproto;
};// -------------------------------------------------------------------

class JudgeCompilerInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:judge.JudgeCompilerInfo) */ {
 public:
  inline JudgeCompilerInfo() : JudgeCompilerInfo(nullptr) {}
  ~JudgeCompilerInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JudgeCompilerInfo(::google::protobuf::internal::ConstantInitialized);

  inline JudgeCompilerInfo(const JudgeCompilerInfo& from)
      : JudgeCompilerInfo(nullptr, from) {}
  JudgeCompilerInfo(JudgeCompilerInfo&& from) noexcept
    : JudgeCompilerInfo() {
    *this = ::std::move(from);
  }

  inline JudgeCompilerInfo& operator=(const JudgeCompilerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline JudgeCompilerInfo& operator=(JudgeCompilerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JudgeCompilerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const JudgeCompilerInfo* internal_default_instance() {
    return reinterpret_cast<const JudgeCompilerInfo*>(
               &_JudgeCompilerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JudgeCompilerInfo& a, JudgeCompilerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(JudgeCompilerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JudgeCompilerInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JudgeCompilerInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JudgeCompilerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JudgeCompilerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JudgeCompilerInfo& from) {
    JudgeCompilerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(JudgeCompilerInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "judge.JudgeCompilerInfo";
  }
  protected:
  explicit JudgeCompilerInfo(::google::protobuf::Arena* arena);
  JudgeCompilerInfo(::google::protobuf::Arena* arena, const JudgeCompilerInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCommandFieldNumber = 2,
    kTimeoutFieldNumber = 3,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string command = 2;
  void clear_command() ;
  const std::string& command() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_command(Arg_&& arg, Args_... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* value);

  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(
      const std::string& value);
  std::string* _internal_mutable_command();

  public:
  // int64 timeout = 3;
  void clear_timeout() ;
  ::int64_t timeout() const;
  void set_timeout(::int64_t value);

  private:
  ::int64_t _internal_timeout() const;
  void _internal_set_timeout(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:judge.JudgeCompilerInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr command_;
    ::int64_t timeout_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Judge_2eproto;
};// -------------------------------------------------------------------

class JudgeTestPointResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:judge.JudgeTestPointResult) */ {
 public:
  inline JudgeTestPointResult() : JudgeTestPointResult(nullptr) {}
  ~JudgeTestPointResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JudgeTestPointResult(::google::protobuf::internal::ConstantInitialized);

  inline JudgeTestPointResult(const JudgeTestPointResult& from)
      : JudgeTestPointResult(nullptr, from) {}
  JudgeTestPointResult(JudgeTestPointResult&& from) noexcept
    : JudgeTestPointResult() {
    *this = ::std::move(from);
  }

  inline JudgeTestPointResult& operator=(const JudgeTestPointResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline JudgeTestPointResult& operator=(JudgeTestPointResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JudgeTestPointResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const JudgeTestPointResult* internal_default_instance() {
    return reinterpret_cast<const JudgeTestPointResult*>(
               &_JudgeTestPointResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JudgeTestPointResult& a, JudgeTestPointResult& b) {
    a.Swap(&b);
  }
  inline void Swap(JudgeTestPointResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JudgeTestPointResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JudgeTestPointResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JudgeTestPointResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JudgeTestPointResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JudgeTestPointResult& from) {
    JudgeTestPointResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(JudgeTestPointResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "judge.JudgeTestPointResult";
  }
  protected:
  explicit JudgeTestPointResult(::google::protobuf::Arena* arena);
  JudgeTestPointResult(::google::protobuf::Arena* arena, const JudgeTestPointResult& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldNumber = 2,
    kUsageFieldNumber = 3,
    kDiffFieldNumber = 4,
    kTestPointIdFieldNumber = 5,
    kStatusFieldNumber = 1,
  };
  // string output = 2;
  void clear_output() ;
  const std::string& output() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_output(Arg_&& arg, Args_... args);
  std::string* mutable_output();
  PROTOBUF_NODISCARD std::string* release_output();
  void set_allocated_output(std::string* value);

  private:
  const std::string& _internal_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output(
      const std::string& value);
  std::string* _internal_mutable_output();

  public:
  // .judge.JudgeResourceUsage usage = 3;
  bool has_usage() const;
  void clear_usage() ;
  const ::judge::JudgeResourceUsage& usage() const;
  PROTOBUF_NODISCARD ::judge::JudgeResourceUsage* release_usage();
  ::judge::JudgeResourceUsage* mutable_usage();
  void set_allocated_usage(::judge::JudgeResourceUsage* value);
  void unsafe_arena_set_allocated_usage(::judge::JudgeResourceUsage* value);
  ::judge::JudgeResourceUsage* unsafe_arena_release_usage();

  private:
  const ::judge::JudgeResourceUsage& _internal_usage() const;
  ::judge::JudgeResourceUsage* _internal_mutable_usage();

  public:
  // .judge.JudgeDifference diff = 4;
  bool has_diff() const;
  void clear_diff() ;
  const ::judge::JudgeDifference& diff() const;
  PROTOBUF_NODISCARD ::judge::JudgeDifference* release_diff();
  ::judge::JudgeDifference* mutable_diff();
  void set_allocated_diff(::judge::JudgeDifference* value);
  void unsafe_arena_set_allocated_diff(::judge::JudgeDifference* value);
  ::judge::JudgeDifference* unsafe_arena_release_diff();

  private:
  const ::judge::JudgeDifference& _internal_diff() const;
  ::judge::JudgeDifference* _internal_mutable_diff();

  public:
  // int64 testPointId = 5;
  void clear_testpointid() ;
  ::int64_t testpointid() const;
  void set_testpointid(::int64_t value);

  private:
  ::int64_t _internal_testpointid() const;
  void _internal_set_testpointid(::int64_t value);

  public:
  // .judge.JudgeStatus status = 1;
  void clear_status() ;
  ::judge::JudgeStatus status() const;
  void set_status(::judge::JudgeStatus value);

  private:
  ::judge::JudgeStatus _internal_status() const;
  void _internal_set_status(::judge::JudgeStatus value);

  public:
  // @@protoc_insertion_point(class_scope:judge.JudgeTestPointResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      41, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr output_;
    ::judge::JudgeResourceUsage* usage_;
    ::judge::JudgeDifference* diff_;
    ::int64_t testpointid_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Judge_2eproto;
};// -------------------------------------------------------------------

class JudgeTask final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:judge.JudgeTask) */ {
 public:
  inline JudgeTask() : JudgeTask(nullptr) {}
  ~JudgeTask() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JudgeTask(::google::protobuf::internal::ConstantInitialized);

  inline JudgeTask(const JudgeTask& from)
      : JudgeTask(nullptr, from) {}
  JudgeTask(JudgeTask&& from) noexcept
    : JudgeTask() {
    *this = ::std::move(from);
  }

  inline JudgeTask& operator=(const JudgeTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline JudgeTask& operator=(JudgeTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JudgeTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const JudgeTask* internal_default_instance() {
    return reinterpret_cast<const JudgeTask*>(
               &_JudgeTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JudgeTask& a, JudgeTask& b) {
    a.Swap(&b);
  }
  inline void Swap(JudgeTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JudgeTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JudgeTask* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JudgeTask>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JudgeTask& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JudgeTask& from) {
    JudgeTask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(JudgeTask* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "judge.JudgeTask";
  }
  protected:
  explicit JudgeTask(::google::protobuf::Arena* arena);
  JudgeTask(::google::protobuf::Arena* arena, const JudgeTask& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestPointsFieldNumber = 5,
    kSourceUriFieldNumber = 2,
    kCompilerFieldNumber = 3,
    kLimitFieldNumber = 4,
    kCommitIdFieldNumber = 1,
  };
  // repeated .judge.JudgeTestPoint testPoints = 5;
  int testpoints_size() const;
  private:
  int _internal_testpoints_size() const;

  public:
  void clear_testpoints() ;
  ::judge::JudgeTestPoint* mutable_testpoints(int index);
  ::google::protobuf::RepeatedPtrField< ::judge::JudgeTestPoint >*
      mutable_testpoints();
  private:
  const ::google::protobuf::RepeatedPtrField<::judge::JudgeTestPoint>& _internal_testpoints() const;
  ::google::protobuf::RepeatedPtrField<::judge::JudgeTestPoint>* _internal_mutable_testpoints();
  public:
  const ::judge::JudgeTestPoint& testpoints(int index) const;
  ::judge::JudgeTestPoint* add_testpoints();
  const ::google::protobuf::RepeatedPtrField< ::judge::JudgeTestPoint >&
      testpoints() const;
  // string sourceUri = 2;
  void clear_sourceuri() ;
  const std::string& sourceuri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sourceuri(Arg_&& arg, Args_... args);
  std::string* mutable_sourceuri();
  PROTOBUF_NODISCARD std::string* release_sourceuri();
  void set_allocated_sourceuri(std::string* value);

  private:
  const std::string& _internal_sourceuri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourceuri(
      const std::string& value);
  std::string* _internal_mutable_sourceuri();

  public:
  // .judge.JudgeCompilerInfo compiler = 3;
  bool has_compiler() const;
  void clear_compiler() ;
  const ::judge::JudgeCompilerInfo& compiler() const;
  PROTOBUF_NODISCARD ::judge::JudgeCompilerInfo* release_compiler();
  ::judge::JudgeCompilerInfo* mutable_compiler();
  void set_allocated_compiler(::judge::JudgeCompilerInfo* value);
  void unsafe_arena_set_allocated_compiler(::judge::JudgeCompilerInfo* value);
  ::judge::JudgeCompilerInfo* unsafe_arena_release_compiler();

  private:
  const ::judge::JudgeCompilerInfo& _internal_compiler() const;
  ::judge::JudgeCompilerInfo* _internal_mutable_compiler();

  public:
  // .judge.JudgeResourceUsage limit = 4;
  bool has_limit() const;
  void clear_limit() ;
  const ::judge::JudgeResourceUsage& limit() const;
  PROTOBUF_NODISCARD ::judge::JudgeResourceUsage* release_limit();
  ::judge::JudgeResourceUsage* mutable_limit();
  void set_allocated_limit(::judge::JudgeResourceUsage* value);
  void unsafe_arena_set_allocated_limit(::judge::JudgeResourceUsage* value);
  ::judge::JudgeResourceUsage* unsafe_arena_release_limit();

  private:
  const ::judge::JudgeResourceUsage& _internal_limit() const;
  ::judge::JudgeResourceUsage* _internal_mutable_limit();

  public:
  // int64 commitId = 1;
  void clear_commitid() ;
  ::int64_t commitid() const;
  void set_commitid(::int64_t value);

  private:
  ::int64_t _internal_commitid() const;
  void _internal_set_commitid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:judge.JudgeTask)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      33, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::judge::JudgeTestPoint > testpoints_;
    ::google::protobuf::internal::ArenaStringPtr sourceuri_;
    ::judge::JudgeCompilerInfo* compiler_;
    ::judge::JudgeResourceUsage* limit_;
    ::int64_t commitid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Judge_2eproto;
};// -------------------------------------------------------------------

class JudgeResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:judge.JudgeResult) */ {
 public:
  inline JudgeResult() : JudgeResult(nullptr) {}
  ~JudgeResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JudgeResult(::google::protobuf::internal::ConstantInitialized);

  inline JudgeResult(const JudgeResult& from)
      : JudgeResult(nullptr, from) {}
  JudgeResult(JudgeResult&& from) noexcept
    : JudgeResult() {
    *this = ::std::move(from);
  }

  inline JudgeResult& operator=(const JudgeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline JudgeResult& operator=(JudgeResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JudgeResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const JudgeResult* internal_default_instance() {
    return reinterpret_cast<const JudgeResult*>(
               &_JudgeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JudgeResult& a, JudgeResult& b) {
    a.Swap(&b);
  }
  inline void Swap(JudgeResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JudgeResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JudgeResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JudgeResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JudgeResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JudgeResult& from) {
    JudgeResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(JudgeResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "judge.JudgeResult";
  }
  protected:
  explicit JudgeResult(::google::protobuf::Arena* arena);
  JudgeResult(::google::protobuf::Arena* arena, const JudgeResult& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestPointResultsFieldNumber = 3,
    kMessageFieldNumber = 4,
    kCommitIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .judge.JudgeTestPointResult testPointResults = 3;
  int testpointresults_size() const;
  private:
  int _internal_testpointresults_size() const;

  public:
  void clear_testpointresults() ;
  ::judge::JudgeTestPointResult* mutable_testpointresults(int index);
  ::google::protobuf::RepeatedPtrField< ::judge::JudgeTestPointResult >*
      mutable_testpointresults();
  private:
  const ::google::protobuf::RepeatedPtrField<::judge::JudgeTestPointResult>& _internal_testpointresults() const;
  ::google::protobuf::RepeatedPtrField<::judge::JudgeTestPointResult>* _internal_mutable_testpointresults();
  public:
  const ::judge::JudgeTestPointResult& testpointresults(int index) const;
  ::judge::JudgeTestPointResult* add_testpointresults();
  const ::google::protobuf::RepeatedPtrField< ::judge::JudgeTestPointResult >&
      testpointresults() const;
  // string message = 4;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // int64 commitId = 1;
  void clear_commitid() ;
  ::int64_t commitid() const;
  void set_commitid(::int64_t value);

  private:
  ::int64_t _internal_commitid() const;
  void _internal_set_commitid(::int64_t value);

  public:
  // .judge.JudgeStatus status = 2;
  void clear_status() ;
  ::judge::JudgeStatus status() const;
  void set_status(::judge::JudgeStatus value);

  private:
  ::judge::JudgeStatus _internal_status() const;
  void _internal_set_status(::judge::JudgeStatus value);

  public:
  // @@protoc_insertion_point(class_scope:judge.JudgeResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      33, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::judge::JudgeTestPointResult > testpointresults_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::int64_t commitid_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Judge_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// JudgeCompilerInfo

// string name = 1;
inline void JudgeCompilerInfo::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& JudgeCompilerInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeCompilerInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JudgeCompilerInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:judge.JudgeCompilerInfo.name)
}
inline std::string* JudgeCompilerInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:judge.JudgeCompilerInfo.name)
  return _s;
}
inline const std::string& JudgeCompilerInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void JudgeCompilerInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* JudgeCompilerInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* JudgeCompilerInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeCompilerInfo.name)
  return _impl_.name_.Release();
}
inline void JudgeCompilerInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeCompilerInfo.name)
}

// string command = 2;
inline void JudgeCompilerInfo::clear_command() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.command_.ClearToEmpty();
}
inline const std::string& JudgeCompilerInfo::command() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeCompilerInfo.command)
  return _internal_command();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JudgeCompilerInfo::set_command(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.command_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:judge.JudgeCompilerInfo.command)
}
inline std::string* JudgeCompilerInfo::mutable_command() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:judge.JudgeCompilerInfo.command)
  return _s;
}
inline const std::string& JudgeCompilerInfo::_internal_command() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.command_.Get();
}
inline void JudgeCompilerInfo::_internal_set_command(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.command_.Set(value, GetArena());
}
inline std::string* JudgeCompilerInfo::_internal_mutable_command() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.command_.Mutable( GetArena());
}
inline std::string* JudgeCompilerInfo::release_command() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeCompilerInfo.command)
  return _impl_.command_.Release();
}
inline void JudgeCompilerInfo::set_allocated_command(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.command_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.command_.IsDefault()) {
          _impl_.command_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeCompilerInfo.command)
}

// int64 timeout = 3;
inline void JudgeCompilerInfo::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timeout_ = ::int64_t{0};
}
inline ::int64_t JudgeCompilerInfo::timeout() const {
  // @@protoc_insertion_point(field_get:judge.JudgeCompilerInfo.timeout)
  return _internal_timeout();
}
inline void JudgeCompilerInfo::set_timeout(::int64_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:judge.JudgeCompilerInfo.timeout)
}
inline ::int64_t JudgeCompilerInfo::_internal_timeout() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timeout_;
}
inline void JudgeCompilerInfo::_internal_set_timeout(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timeout_ = value;
}

// -------------------------------------------------------------------

// JudgeResourceUsage

// int64 time = 1;
inline void JudgeResourceUsage::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_ = ::int64_t{0};
}
inline ::int64_t JudgeResourceUsage::time() const {
  // @@protoc_insertion_point(field_get:judge.JudgeResourceUsage.time)
  return _internal_time();
}
inline void JudgeResourceUsage::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:judge.JudgeResourceUsage.time)
}
inline ::int64_t JudgeResourceUsage::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void JudgeResourceUsage::_internal_set_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_ = value;
}

// int64 memory = 2;
inline void JudgeResourceUsage::clear_memory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.memory_ = ::int64_t{0};
}
inline ::int64_t JudgeResourceUsage::memory() const {
  // @@protoc_insertion_point(field_get:judge.JudgeResourceUsage.memory)
  return _internal_memory();
}
inline void JudgeResourceUsage::set_memory(::int64_t value) {
  _internal_set_memory(value);
  // @@protoc_insertion_point(field_set:judge.JudgeResourceUsage.memory)
}
inline ::int64_t JudgeResourceUsage::_internal_memory() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.memory_;
}
inline void JudgeResourceUsage::_internal_set_memory(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.memory_ = value;
}

// -------------------------------------------------------------------

// JudgeTestPoint

// string input = 1;
inline void JudgeTestPoint::clear_input() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.input_.ClearToEmpty();
}
inline const std::string& JudgeTestPoint::input() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeTestPoint.input)
  return _internal_input();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JudgeTestPoint::set_input(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.input_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:judge.JudgeTestPoint.input)
}
inline std::string* JudgeTestPoint::mutable_input() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:judge.JudgeTestPoint.input)
  return _s;
}
inline const std::string& JudgeTestPoint::_internal_input() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.input_.Get();
}
inline void JudgeTestPoint::_internal_set_input(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.input_.Set(value, GetArena());
}
inline std::string* JudgeTestPoint::_internal_mutable_input() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.input_.Mutable( GetArena());
}
inline std::string* JudgeTestPoint::release_input() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeTestPoint.input)
  return _impl_.input_.Release();
}
inline void JudgeTestPoint::set_allocated_input(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.input_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.input_.IsDefault()) {
          _impl_.input_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeTestPoint.input)
}

// string expected = 2;
inline void JudgeTestPoint::clear_expected() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expected_.ClearToEmpty();
}
inline const std::string& JudgeTestPoint::expected() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeTestPoint.expected)
  return _internal_expected();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JudgeTestPoint::set_expected(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expected_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:judge.JudgeTestPoint.expected)
}
inline std::string* JudgeTestPoint::mutable_expected() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expected();
  // @@protoc_insertion_point(field_mutable:judge.JudgeTestPoint.expected)
  return _s;
}
inline const std::string& JudgeTestPoint::_internal_expected() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expected_.Get();
}
inline void JudgeTestPoint::_internal_set_expected(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expected_.Set(value, GetArena());
}
inline std::string* JudgeTestPoint::_internal_mutable_expected() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.expected_.Mutable( GetArena());
}
inline std::string* JudgeTestPoint::release_expected() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeTestPoint.expected)
  return _impl_.expected_.Release();
}
inline void JudgeTestPoint::set_allocated_expected(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expected_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.expected_.IsDefault()) {
          _impl_.expected_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeTestPoint.expected)
}

// int64 testPointId = 3;
inline void JudgeTestPoint::clear_testpointid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.testpointid_ = ::int64_t{0};
}
inline ::int64_t JudgeTestPoint::testpointid() const {
  // @@protoc_insertion_point(field_get:judge.JudgeTestPoint.testPointId)
  return _internal_testpointid();
}
inline void JudgeTestPoint::set_testpointid(::int64_t value) {
  _internal_set_testpointid(value);
  // @@protoc_insertion_point(field_set:judge.JudgeTestPoint.testPointId)
}
inline ::int64_t JudgeTestPoint::_internal_testpointid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.testpointid_;
}
inline void JudgeTestPoint::_internal_set_testpointid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.testpointid_ = value;
}

// -------------------------------------------------------------------

// JudgeDifference

// int64 pos = 1;
inline void JudgeDifference::clear_pos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pos_ = ::int64_t{0};
}
inline ::int64_t JudgeDifference::pos() const {
  // @@protoc_insertion_point(field_get:judge.JudgeDifference.pos)
  return _internal_pos();
}
inline void JudgeDifference::set_pos(::int64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:judge.JudgeDifference.pos)
}
inline ::int64_t JudgeDifference::_internal_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pos_;
}
inline void JudgeDifference::_internal_set_pos(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pos_ = value;
}

// string actual = 2;
inline void JudgeDifference::clear_actual() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actual_.ClearToEmpty();
}
inline const std::string& JudgeDifference::actual() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeDifference.actual)
  return _internal_actual();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JudgeDifference::set_actual(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actual_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:judge.JudgeDifference.actual)
}
inline std::string* JudgeDifference::mutable_actual() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_actual();
  // @@protoc_insertion_point(field_mutable:judge.JudgeDifference.actual)
  return _s;
}
inline const std::string& JudgeDifference::_internal_actual() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.actual_.Get();
}
inline void JudgeDifference::_internal_set_actual(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.actual_.Set(value, GetArena());
}
inline std::string* JudgeDifference::_internal_mutable_actual() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.actual_.Mutable( GetArena());
}
inline std::string* JudgeDifference::release_actual() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeDifference.actual)
  return _impl_.actual_.Release();
}
inline void JudgeDifference::set_allocated_actual(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.actual_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.actual_.IsDefault()) {
          _impl_.actual_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeDifference.actual)
}

// string expected = 3;
inline void JudgeDifference::clear_expected() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expected_.ClearToEmpty();
}
inline const std::string& JudgeDifference::expected() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeDifference.expected)
  return _internal_expected();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JudgeDifference::set_expected(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expected_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:judge.JudgeDifference.expected)
}
inline std::string* JudgeDifference::mutable_expected() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_expected();
  // @@protoc_insertion_point(field_mutable:judge.JudgeDifference.expected)
  return _s;
}
inline const std::string& JudgeDifference::_internal_expected() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expected_.Get();
}
inline void JudgeDifference::_internal_set_expected(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expected_.Set(value, GetArena());
}
inline std::string* JudgeDifference::_internal_mutable_expected() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.expected_.Mutable( GetArena());
}
inline std::string* JudgeDifference::release_expected() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeDifference.expected)
  return _impl_.expected_.Release();
}
inline void JudgeDifference::set_allocated_expected(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expected_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.expected_.IsDefault()) {
          _impl_.expected_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeDifference.expected)
}

// -------------------------------------------------------------------

// JudgeTestPointResult

// .judge.JudgeStatus status = 1;
inline void JudgeTestPointResult::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::judge::JudgeStatus JudgeTestPointResult::status() const {
  // @@protoc_insertion_point(field_get:judge.JudgeTestPointResult.status)
  return _internal_status();
}
inline void JudgeTestPointResult::set_status(::judge::JudgeStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:judge.JudgeTestPointResult.status)
}
inline ::judge::JudgeStatus JudgeTestPointResult::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::judge::JudgeStatus>(_impl_.status_);
}
inline void JudgeTestPointResult::_internal_set_status(::judge::JudgeStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// string output = 2;
inline void JudgeTestPointResult::clear_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.output_.ClearToEmpty();
}
inline const std::string& JudgeTestPointResult::output() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeTestPointResult.output)
  return _internal_output();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JudgeTestPointResult::set_output(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.output_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:judge.JudgeTestPointResult.output)
}
inline std::string* JudgeTestPointResult::mutable_output() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:judge.JudgeTestPointResult.output)
  return _s;
}
inline const std::string& JudgeTestPointResult::_internal_output() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.output_.Get();
}
inline void JudgeTestPointResult::_internal_set_output(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.output_.Set(value, GetArena());
}
inline std::string* JudgeTestPointResult::_internal_mutable_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.output_.Mutable( GetArena());
}
inline std::string* JudgeTestPointResult::release_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeTestPointResult.output)
  return _impl_.output_.Release();
}
inline void JudgeTestPointResult::set_allocated_output(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.output_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.output_.IsDefault()) {
          _impl_.output_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeTestPointResult.output)
}

// .judge.JudgeResourceUsage usage = 3;
inline bool JudgeTestPointResult::has_usage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.usage_ != nullptr);
  return value;
}
inline void JudgeTestPointResult::clear_usage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.usage_ != nullptr) _impl_.usage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::judge::JudgeResourceUsage& JudgeTestPointResult::_internal_usage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::judge::JudgeResourceUsage* p = _impl_.usage_;
  return p != nullptr ? *p : reinterpret_cast<const ::judge::JudgeResourceUsage&>(::judge::_JudgeResourceUsage_default_instance_);
}
inline const ::judge::JudgeResourceUsage& JudgeTestPointResult::usage() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeTestPointResult.usage)
  return _internal_usage();
}
inline void JudgeTestPointResult::unsafe_arena_set_allocated_usage(::judge::JudgeResourceUsage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.usage_);
  }
  _impl_.usage_ = reinterpret_cast<::judge::JudgeResourceUsage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:judge.JudgeTestPointResult.usage)
}
inline ::judge::JudgeResourceUsage* JudgeTestPointResult::release_usage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::judge::JudgeResourceUsage* released = _impl_.usage_;
  _impl_.usage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::judge::JudgeResourceUsage* JudgeTestPointResult::unsafe_arena_release_usage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeTestPointResult.usage)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::judge::JudgeResourceUsage* temp = _impl_.usage_;
  _impl_.usage_ = nullptr;
  return temp;
}
inline ::judge::JudgeResourceUsage* JudgeTestPointResult::_internal_mutable_usage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.usage_ == nullptr) {
    auto* p = CreateMaybeMessage<::judge::JudgeResourceUsage>(GetArena());
    _impl_.usage_ = reinterpret_cast<::judge::JudgeResourceUsage*>(p);
  }
  return _impl_.usage_;
}
inline ::judge::JudgeResourceUsage* JudgeTestPointResult::mutable_usage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::judge::JudgeResourceUsage* _msg = _internal_mutable_usage();
  // @@protoc_insertion_point(field_mutable:judge.JudgeTestPointResult.usage)
  return _msg;
}
inline void JudgeTestPointResult::set_allocated_usage(::judge::JudgeResourceUsage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::judge::JudgeResourceUsage*>(_impl_.usage_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::judge::JudgeResourceUsage*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.usage_ = reinterpret_cast<::judge::JudgeResourceUsage*>(value);
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeTestPointResult.usage)
}

// .judge.JudgeDifference diff = 4;
inline bool JudgeTestPointResult::has_diff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.diff_ != nullptr);
  return value;
}
inline void JudgeTestPointResult::clear_diff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.diff_ != nullptr) _impl_.diff_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::judge::JudgeDifference& JudgeTestPointResult::_internal_diff() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::judge::JudgeDifference* p = _impl_.diff_;
  return p != nullptr ? *p : reinterpret_cast<const ::judge::JudgeDifference&>(::judge::_JudgeDifference_default_instance_);
}
inline const ::judge::JudgeDifference& JudgeTestPointResult::diff() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeTestPointResult.diff)
  return _internal_diff();
}
inline void JudgeTestPointResult::unsafe_arena_set_allocated_diff(::judge::JudgeDifference* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.diff_);
  }
  _impl_.diff_ = reinterpret_cast<::judge::JudgeDifference*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:judge.JudgeTestPointResult.diff)
}
inline ::judge::JudgeDifference* JudgeTestPointResult::release_diff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::judge::JudgeDifference* released = _impl_.diff_;
  _impl_.diff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::judge::JudgeDifference* JudgeTestPointResult::unsafe_arena_release_diff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeTestPointResult.diff)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::judge::JudgeDifference* temp = _impl_.diff_;
  _impl_.diff_ = nullptr;
  return temp;
}
inline ::judge::JudgeDifference* JudgeTestPointResult::_internal_mutable_diff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.diff_ == nullptr) {
    auto* p = CreateMaybeMessage<::judge::JudgeDifference>(GetArena());
    _impl_.diff_ = reinterpret_cast<::judge::JudgeDifference*>(p);
  }
  return _impl_.diff_;
}
inline ::judge::JudgeDifference* JudgeTestPointResult::mutable_diff() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::judge::JudgeDifference* _msg = _internal_mutable_diff();
  // @@protoc_insertion_point(field_mutable:judge.JudgeTestPointResult.diff)
  return _msg;
}
inline void JudgeTestPointResult::set_allocated_diff(::judge::JudgeDifference* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::judge::JudgeDifference*>(_impl_.diff_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::judge::JudgeDifference*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.diff_ = reinterpret_cast<::judge::JudgeDifference*>(value);
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeTestPointResult.diff)
}

// int64 testPointId = 5;
inline void JudgeTestPointResult::clear_testpointid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.testpointid_ = ::int64_t{0};
}
inline ::int64_t JudgeTestPointResult::testpointid() const {
  // @@protoc_insertion_point(field_get:judge.JudgeTestPointResult.testPointId)
  return _internal_testpointid();
}
inline void JudgeTestPointResult::set_testpointid(::int64_t value) {
  _internal_set_testpointid(value);
  // @@protoc_insertion_point(field_set:judge.JudgeTestPointResult.testPointId)
}
inline ::int64_t JudgeTestPointResult::_internal_testpointid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.testpointid_;
}
inline void JudgeTestPointResult::_internal_set_testpointid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.testpointid_ = value;
}

// -------------------------------------------------------------------

// JudgeTask

// int64 commitId = 1;
inline void JudgeTask::clear_commitid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.commitid_ = ::int64_t{0};
}
inline ::int64_t JudgeTask::commitid() const {
  // @@protoc_insertion_point(field_get:judge.JudgeTask.commitId)
  return _internal_commitid();
}
inline void JudgeTask::set_commitid(::int64_t value) {
  _internal_set_commitid(value);
  // @@protoc_insertion_point(field_set:judge.JudgeTask.commitId)
}
inline ::int64_t JudgeTask::_internal_commitid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.commitid_;
}
inline void JudgeTask::_internal_set_commitid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.commitid_ = value;
}

// string sourceUri = 2;
inline void JudgeTask::clear_sourceuri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sourceuri_.ClearToEmpty();
}
inline const std::string& JudgeTask::sourceuri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeTask.sourceUri)
  return _internal_sourceuri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JudgeTask::set_sourceuri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sourceuri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:judge.JudgeTask.sourceUri)
}
inline std::string* JudgeTask::mutable_sourceuri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sourceuri();
  // @@protoc_insertion_point(field_mutable:judge.JudgeTask.sourceUri)
  return _s;
}
inline const std::string& JudgeTask::_internal_sourceuri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sourceuri_.Get();
}
inline void JudgeTask::_internal_set_sourceuri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sourceuri_.Set(value, GetArena());
}
inline std::string* JudgeTask::_internal_mutable_sourceuri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sourceuri_.Mutable( GetArena());
}
inline std::string* JudgeTask::release_sourceuri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeTask.sourceUri)
  return _impl_.sourceuri_.Release();
}
inline void JudgeTask::set_allocated_sourceuri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sourceuri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sourceuri_.IsDefault()) {
          _impl_.sourceuri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeTask.sourceUri)
}

// .judge.JudgeCompilerInfo compiler = 3;
inline bool JudgeTask::has_compiler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.compiler_ != nullptr);
  return value;
}
inline void JudgeTask::clear_compiler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.compiler_ != nullptr) _impl_.compiler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::judge::JudgeCompilerInfo& JudgeTask::_internal_compiler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::judge::JudgeCompilerInfo* p = _impl_.compiler_;
  return p != nullptr ? *p : reinterpret_cast<const ::judge::JudgeCompilerInfo&>(::judge::_JudgeCompilerInfo_default_instance_);
}
inline const ::judge::JudgeCompilerInfo& JudgeTask::compiler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeTask.compiler)
  return _internal_compiler();
}
inline void JudgeTask::unsafe_arena_set_allocated_compiler(::judge::JudgeCompilerInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.compiler_);
  }
  _impl_.compiler_ = reinterpret_cast<::judge::JudgeCompilerInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:judge.JudgeTask.compiler)
}
inline ::judge::JudgeCompilerInfo* JudgeTask::release_compiler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::judge::JudgeCompilerInfo* released = _impl_.compiler_;
  _impl_.compiler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::judge::JudgeCompilerInfo* JudgeTask::unsafe_arena_release_compiler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeTask.compiler)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::judge::JudgeCompilerInfo* temp = _impl_.compiler_;
  _impl_.compiler_ = nullptr;
  return temp;
}
inline ::judge::JudgeCompilerInfo* JudgeTask::_internal_mutable_compiler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.compiler_ == nullptr) {
    auto* p = CreateMaybeMessage<::judge::JudgeCompilerInfo>(GetArena());
    _impl_.compiler_ = reinterpret_cast<::judge::JudgeCompilerInfo*>(p);
  }
  return _impl_.compiler_;
}
inline ::judge::JudgeCompilerInfo* JudgeTask::mutable_compiler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::judge::JudgeCompilerInfo* _msg = _internal_mutable_compiler();
  // @@protoc_insertion_point(field_mutable:judge.JudgeTask.compiler)
  return _msg;
}
inline void JudgeTask::set_allocated_compiler(::judge::JudgeCompilerInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::judge::JudgeCompilerInfo*>(_impl_.compiler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::judge::JudgeCompilerInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.compiler_ = reinterpret_cast<::judge::JudgeCompilerInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeTask.compiler)
}

// .judge.JudgeResourceUsage limit = 4;
inline bool JudgeTask::has_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.limit_ != nullptr);
  return value;
}
inline void JudgeTask::clear_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.limit_ != nullptr) _impl_.limit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::judge::JudgeResourceUsage& JudgeTask::_internal_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::judge::JudgeResourceUsage* p = _impl_.limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::judge::JudgeResourceUsage&>(::judge::_JudgeResourceUsage_default_instance_);
}
inline const ::judge::JudgeResourceUsage& JudgeTask::limit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeTask.limit)
  return _internal_limit();
}
inline void JudgeTask::unsafe_arena_set_allocated_limit(::judge::JudgeResourceUsage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limit_);
  }
  _impl_.limit_ = reinterpret_cast<::judge::JudgeResourceUsage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:judge.JudgeTask.limit)
}
inline ::judge::JudgeResourceUsage* JudgeTask::release_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::judge::JudgeResourceUsage* released = _impl_.limit_;
  _impl_.limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::judge::JudgeResourceUsage* JudgeTask::unsafe_arena_release_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeTask.limit)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::judge::JudgeResourceUsage* temp = _impl_.limit_;
  _impl_.limit_ = nullptr;
  return temp;
}
inline ::judge::JudgeResourceUsage* JudgeTask::_internal_mutable_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::judge::JudgeResourceUsage>(GetArena());
    _impl_.limit_ = reinterpret_cast<::judge::JudgeResourceUsage*>(p);
  }
  return _impl_.limit_;
}
inline ::judge::JudgeResourceUsage* JudgeTask::mutable_limit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::judge::JudgeResourceUsage* _msg = _internal_mutable_limit();
  // @@protoc_insertion_point(field_mutable:judge.JudgeTask.limit)
  return _msg;
}
inline void JudgeTask::set_allocated_limit(::judge::JudgeResourceUsage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::judge::JudgeResourceUsage*>(_impl_.limit_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::judge::JudgeResourceUsage*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.limit_ = reinterpret_cast<::judge::JudgeResourceUsage*>(value);
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeTask.limit)
}

// repeated .judge.JudgeTestPoint testPoints = 5;
inline int JudgeTask::_internal_testpoints_size() const {
  return _internal_testpoints().size();
}
inline int JudgeTask::testpoints_size() const {
  return _internal_testpoints_size();
}
inline void JudgeTask::clear_testpoints() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.testpoints_.Clear();
}
inline ::judge::JudgeTestPoint* JudgeTask::mutable_testpoints(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:judge.JudgeTask.testPoints)
  return _internal_mutable_testpoints()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::judge::JudgeTestPoint>* JudgeTask::mutable_testpoints()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:judge.JudgeTask.testPoints)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_testpoints();
}
inline const ::judge::JudgeTestPoint& JudgeTask::testpoints(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeTask.testPoints)
  return _internal_testpoints().Get(index);
}
inline ::judge::JudgeTestPoint* JudgeTask::add_testpoints() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::judge::JudgeTestPoint* _add = _internal_mutable_testpoints()->Add();
  // @@protoc_insertion_point(field_add:judge.JudgeTask.testPoints)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::judge::JudgeTestPoint>& JudgeTask::testpoints() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:judge.JudgeTask.testPoints)
  return _internal_testpoints();
}
inline const ::google::protobuf::RepeatedPtrField<::judge::JudgeTestPoint>&
JudgeTask::_internal_testpoints() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.testpoints_;
}
inline ::google::protobuf::RepeatedPtrField<::judge::JudgeTestPoint>*
JudgeTask::_internal_mutable_testpoints() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.testpoints_;
}

// -------------------------------------------------------------------

// JudgeResult

// int64 commitId = 1;
inline void JudgeResult::clear_commitid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.commitid_ = ::int64_t{0};
}
inline ::int64_t JudgeResult::commitid() const {
  // @@protoc_insertion_point(field_get:judge.JudgeResult.commitId)
  return _internal_commitid();
}
inline void JudgeResult::set_commitid(::int64_t value) {
  _internal_set_commitid(value);
  // @@protoc_insertion_point(field_set:judge.JudgeResult.commitId)
}
inline ::int64_t JudgeResult::_internal_commitid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.commitid_;
}
inline void JudgeResult::_internal_set_commitid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.commitid_ = value;
}

// .judge.JudgeStatus status = 2;
inline void JudgeResult::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::judge::JudgeStatus JudgeResult::status() const {
  // @@protoc_insertion_point(field_get:judge.JudgeResult.status)
  return _internal_status();
}
inline void JudgeResult::set_status(::judge::JudgeStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:judge.JudgeResult.status)
}
inline ::judge::JudgeStatus JudgeResult::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::judge::JudgeStatus>(_impl_.status_);
}
inline void JudgeResult::_internal_set_status(::judge::JudgeStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// repeated .judge.JudgeTestPointResult testPointResults = 3;
inline int JudgeResult::_internal_testpointresults_size() const {
  return _internal_testpointresults().size();
}
inline int JudgeResult::testpointresults_size() const {
  return _internal_testpointresults_size();
}
inline void JudgeResult::clear_testpointresults() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.testpointresults_.Clear();
}
inline ::judge::JudgeTestPointResult* JudgeResult::mutable_testpointresults(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:judge.JudgeResult.testPointResults)
  return _internal_mutable_testpointresults()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::judge::JudgeTestPointResult>* JudgeResult::mutable_testpointresults()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:judge.JudgeResult.testPointResults)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_testpointresults();
}
inline const ::judge::JudgeTestPointResult& JudgeResult::testpointresults(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeResult.testPointResults)
  return _internal_testpointresults().Get(index);
}
inline ::judge::JudgeTestPointResult* JudgeResult::add_testpointresults() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::judge::JudgeTestPointResult* _add = _internal_mutable_testpointresults()->Add();
  // @@protoc_insertion_point(field_add:judge.JudgeResult.testPointResults)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::judge::JudgeTestPointResult>& JudgeResult::testpointresults() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:judge.JudgeResult.testPointResults)
  return _internal_testpointresults();
}
inline const ::google::protobuf::RepeatedPtrField<::judge::JudgeTestPointResult>&
JudgeResult::_internal_testpointresults() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.testpointresults_;
}
inline ::google::protobuf::RepeatedPtrField<::judge::JudgeTestPointResult>*
JudgeResult::_internal_mutable_testpointresults() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.testpointresults_;
}

// string message = 4;
inline void JudgeResult::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& JudgeResult::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:judge.JudgeResult.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JudgeResult::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:judge.JudgeResult.message)
}
inline std::string* JudgeResult::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:judge.JudgeResult.message)
  return _s;
}
inline const std::string& JudgeResult::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void JudgeResult::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* JudgeResult::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* JudgeResult::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:judge.JudgeResult.message)
  return _impl_.message_.Release();
}
inline void JudgeResult::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:judge.JudgeResult.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace judge


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::judge::JudgeStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::judge::JudgeStatus>() {
  return ::judge::JudgeStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Judge_2eproto_2epb_2eh
