// generated by ./utils/sqlpp11-ddl2cpp ./src/shared/models/testpoints.sql test_point himu
#ifndef HIMU_TEST_POINT_H
#define HIMU_TEST_POINT_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace himu::sql_models
{
  namespace Testpoints_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Id;
            T& operator()() { return Id; }
            const T& operator()() const { return Id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Input
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Input";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Input;
            T& operator()() { return Input; }
            const T& operator()() const { return Input; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Expected
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Expected";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Expected;
            T& operator()() { return Expected; }
            const T& operator()() const { return Expected; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ProblemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ProblemId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ProblemId;
            T& operator()() { return ProblemId; }
            const T& operator()() const { return ProblemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct CaseName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "CaseName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CaseName;
            T& operator()() { return CaseName; }
            const T& operator()() const { return CaseName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Testpoints_

  struct Testpoints: sqlpp::table_t<Testpoints,
               Testpoints_::Id,
               Testpoints_::Input,
               Testpoints_::Expected,
               Testpoints_::ProblemId,
               Testpoints_::CaseName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "testpoints";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T testpoints;
        T& operator()() { return testpoints; }
        const T& operator()() const { return testpoints; }
      };
    };
  };
} // namespace himu
#endif
