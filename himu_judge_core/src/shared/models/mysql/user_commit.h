// generated by ./utils/sqlpp11-ddl2cpp ./src/shared/models/user_commit.sql user_commit himu
#ifndef HIMU_USER_COMMIT_H
#define HIMU_USER_COMMIT_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace himu::sql_models
{
  namespace Usercommits_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Id;
            T& operator()() { return Id; }
            const T& operator()() const { return Id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct SourceUri
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "SourceUri";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SourceUri;
            T& operator()() { return SourceUri; }
            const T& operator()() const { return SourceUri; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Status;
            T& operator()() { return Status; }
            const T& operator()() const { return Status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct UserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "UserId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T UserId;
            T& operator()() { return UserId; }
            const T& operator()() const { return UserId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ProblemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ProblemId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ProblemId;
            T& operator()() { return ProblemId; }
            const T& operator()() const { return ProblemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct CompilerInformationCompilerName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "CompilerInformation_CompilerName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CompilerInformationCompilerName;
            T& operator()() { return CompilerInformationCompilerName; }
            const T& operator()() const { return CompilerInformationCompilerName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct CompilerInformationMessageFromCompiler
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "CompilerInformation_MessageFromCompiler";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CompilerInformationMessageFromCompiler;
            T& operator()() { return CompilerInformationMessageFromCompiler; }
            const T& operator()() const { return CompilerInformationMessageFromCompiler; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Usercommits_

  struct Usercommits: sqlpp::table_t<Usercommits,
               Usercommits_::Id,
               Usercommits_::SourceUri,
               Usercommits_::Status,
               Usercommits_::UserId,
               Usercommits_::ProblemId,
               Usercommits_::CompilerInformationCompilerName,
               Usercommits_::CompilerInformationMessageFromCompiler>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "usercommits";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T usercommits;
        T& operator()() { return usercommits; }
        const T& operator()() const { return usercommits; }
      };
    };
  };
} // namespace himu
#endif
