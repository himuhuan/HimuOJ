// generated by ./utils/sqlpp11-ddl2cpp ./src/shared/dto/pointresults.sql point_result himu
#ifndef HIMU_POINT_RESULT_H
#define HIMU_POINT_RESULT_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace himu::sql_models
{
  namespace Pointresults_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Id;
            T& operator()() { return Id; }
            const T& operator()() const { return Id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct TestStatus
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TestStatus";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TestStatus;
            T& operator()() { return TestStatus; }
            const T& operator()() const { return TestStatus; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct UsageMemoryByteUsed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Usage_MemoryByteUsed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T UsageMemoryByteUsed;
            T& operator()() { return UsageMemoryByteUsed; }
            const T& operator()() const { return UsageMemoryByteUsed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct UsageTimeUsed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Usage_TimeUsed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T UsageTimeUsed;
            T& operator()() { return UsageTimeUsed; }
            const T& operator()() const { return UsageTimeUsed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct RunResultExitCode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "RunResult_ExitCode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RunResultExitCode;
            T& operator()() { return RunResultExitCode; }
            const T& operator()() const { return RunResultExitCode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct RunResultMessage
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "RunResult_Message";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RunResultMessage;
            T& operator()() { return RunResultMessage; }
            const T& operator()() const { return RunResultMessage; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TestPointId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TestPointId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TestPointId;
            T& operator()() { return TestPointId; }
            const T& operator()() const { return TestPointId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct CommitId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "CommitId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CommitId;
            T& operator()() { return CommitId; }
            const T& operator()() const { return CommitId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct DifferenceActual
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Difference_Actual";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DifferenceActual;
            T& operator()() { return DifferenceActual; }
            const T& operator()() const { return DifferenceActual; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct DifferenceExpected
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Difference_Expected";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DifferenceExpected;
            T& operator()() { return DifferenceExpected; }
            const T& operator()() const { return DifferenceExpected; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct DifferencePosition
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Difference_Position";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DifferencePosition;
            T& operator()() { return DifferencePosition; }
            const T& operator()() const { return DifferencePosition; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Pointresults_

  struct Pointresults: sqlpp::table_t<Pointresults,
               Pointresults_::Id,
               Pointresults_::TestStatus,
               Pointresults_::UsageMemoryByteUsed,
               Pointresults_::UsageTimeUsed,
               Pointresults_::RunResultExitCode,
               Pointresults_::RunResultMessage,
               Pointresults_::TestPointId,
               Pointresults_::CommitId,
               Pointresults_::DifferenceActual,
               Pointresults_::DifferenceExpected,
               Pointresults_::DifferencePosition>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pointresults";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T pointresults;
        T& operator()() { return pointresults; }
        const T& operator()() const { return pointresults; }
      };
    };
  };
} // namespace himu
#endif
